"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è FTP Bridge - Pydantic v2 BaseSettings
–í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ —Ç–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!
"""

import os
import secrets
from pathlib import Path
from typing import Dict, List, Optional, Set
from enum import Enum

from pydantic import BaseSettings, Field, validator
from pydantic_settings import BaseSettings as PydanticBaseSettings

class LogLevel(str, Enum):
    """–£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    DEBUG = "DEBUG"
    INFO = "INFO"
    WARNING = "WARNING"
    ERROR = "ERROR"
    CRITICAL = "CRITICAL"

class ProtocolType(str, Enum):
    """–¢–∏–ø—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    FTP = "ftp"
    FTPS = "ftps"
    SFTP = "sftp"

class Settings(PydanticBaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Pydantic v2 BaseSettings"""
    
    # ====== –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –°–ï–†–í–ï–†–ê ======
    host: str = Field(default="0.0.0.0", env="FTP_BRIDGE_HOST")
    port: int = Field(default=8000, ge=1, le=65535, env="FTP_BRIDGE_PORT")
    debug: bool = Field(default=False, env="FTP_BRIDGE_DEBUG")
    degraded_mode: bool = Field(default=False, env="FTP_BRIDGE_DEGRADED_MODE")
    
    # ====== –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ò –¢–û–ö–ï–ù–´ ======
    # –ö–†–ò–¢–ò–ß–ù–û: –¢–æ–∫–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!
    client_tokens: Dict[str, str] = Field(default_factory=dict)
    min_token_length: int = Field(default=32, ge=16)
    
    # ====== CORS –ù–ê–°–¢–†–û–ô–ö–ò ======
    cors_origins: List[str] = Field(
        default=["http://localhost:3000", "http://127.0.0.1:3000"],
        env="FTP_BRIDGE_CORS_ORIGINS"
    )
    cors_allow_credentials: bool = Field(default=True, env="FTP_BRIDGE_CORS_CREDENTIALS")
    cors_allow_methods: List[str] = Field(default=["GET"], env="FTP_BRIDGE_CORS_METHODS")
    
    # ====== FTP/SFTP –ù–ê–°–¢–†–û–ô–ö–ò ======
    default_protocol: ProtocolType = Field(default=ProtocolType.FTPS, env="FTP_BRIDGE_DEFAULT_PROTOCOL")
    use_ftps: bool = Field(default=True, env="FTP_BRIDGE_USE_FTPS")
    ftp_timeout: int = Field(default=30, ge=5, le=300, env="FTP_BRIDGE_FTP_TIMEOUT")
    ftp_port: int = Field(default=21, ge=1, le=65535, env="FTP_BRIDGE_FTP_PORT")
    sftp_port: int = Field(default=22, ge=1, le=65535, env="FTP_BRIDGE_SFTP_PORT")
    known_hosts_path: Optional[str] = Field(default=None, env="FTP_BRIDGE_KNOWN_HOSTS_PATH")
    
    # ====== –§–ê–ô–õ–´ –ò –°–¢–†–ò–ú–ò–ù–ì ======
    temp_dir: str = Field(default="./temp", env="FTP_BRIDGE_TEMP_DIR")
    max_file_size: int = Field(default=1073741824, ge=1, env="FTP_BRIDGE_MAX_FILE_SIZE")  # 1GB
    chunk_size: int = Field(default=8192, ge=1024, le=1048576, env="FTP_BRIDGE_CHUNK_SIZE")  # 8KB
    cleanup_interval: int = Field(default=3600, ge=60, env="FTP_BRIDGE_CLEANUP_INTERVAL")  # 1 —á–∞—Å
    
    # ====== RATE LIMITING ======
    rate_limit_enabled: bool = Field(default=True, env="FTP_BRIDGE_RATE_LIMIT_ENABLED")
    rate_limit_requests: int = Field(default=100, ge=1, env="FTP_BRIDGE_RATE_LIMIT_REQUESTS")
    rate_limit_window: int = Field(default=3600, ge=60, env="FTP_BRIDGE_RATE_LIMIT_WINDOW")  # 1 —á–∞—Å
    
    # ====== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ======
    log_level: LogLevel = Field(default=LogLevel.INFO, env="FTP_BRIDGE_LOG_LEVEL")
    log_file: str = Field(default="ftp_bridge.log", env="FTP_BRIDGE_LOG_FILE")
    log_max_size: int = Field(default=10485760, ge=1048576, env="FTP_BRIDGE_LOG_MAX_SIZE")  # 10MB
    log_backup_count: int = Field(default=5, ge=1, le=20, env="FTP_BRIDGE_LOG_BACKUP_COUNT")
    log_rotation_enabled: bool = Field(default=True, env="FTP_BRIDGE_LOG_ROTATION")
    
    # ====== –†–ê–ó–†–ï–®–ï–ù–ù–´–ï –†–ê–°–®–ò–†–ï–ù–ò–Ø ======
    allowed_extensions: Set[str] = Field(
        default={'.txt', '.csv', '.xlsx', '.xls', '.pdf', '.zip', '.json', '.xml', '.tsv', '.dat', '.log'},
        env="FTP_BRIDGE_ALLOWED_EXTENSIONS"
    )
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = False
        
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._load_client_tokens()
        self._validate_security_settings()
    
    def _load_client_tokens(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        tokens = {}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º FTP_BRIDGE_TOKEN_
        for key, value in os.environ.items():
            if key.startswith("FTP_BRIDGE_TOKEN_") and len(key) > 17:
                client_name = key[17:].replace("_", " ").title()  # FTP_BRIDGE_TOKEN_CLIENT1 -> Client1
                if len(value) >= self.min_token_length:
                    tokens[value] = client_name
                else:
                    raise ValueError(f"–¢–æ–∫–µ–Ω –¥–ª—è {client_name} —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º {self.min_token_length} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        if not tokens:
            raise ValueError(
                "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞!\n"
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
                "export FTP_BRIDGE_TOKEN_CLIENT1=your_secure_32_char_token_here\n"
                "export FTP_BRIDGE_TOKEN_POWERBI=another_secure_token_here\n\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {self.min_token_length} —Å–∏–º–≤–æ–ª–æ–≤\n"
                "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞: python -c \"import secrets; print(secrets.token_hex(16))\""
            )
        
        self.client_tokens = tokens
    
    def _validate_security_settings(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if not self.debug:  # –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º
            if "*" in self.cors_origins or "http://localhost" in str(self.cors_origins):
                issues.append("–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ CORS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏")
            
            if self.log_level == LogLevel.DEBUG:
                issues.append("–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DEBUG —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        weak_tokens = [token for token in self.client_tokens.keys() if len(token) < 32]
        if weak_tokens:
            issues.append(f"–ù–∞–π–¥–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã –∫–æ—Ä–æ—á–µ 32 —Å–∏–º–≤–æ–ª–æ–≤: {len(weak_tokens)} —à—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if self.default_protocol == ProtocolType.FTP:
            issues.append("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í–∫–ª—é—á–µ–Ω –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π FTP –ø—Ä–æ—Ç–æ–∫–æ–ª! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FTPS –∏–ª–∏ SFTP")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SFTP –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.default_protocol == ProtocolType.SFTP and not self.known_hosts_path:
            issues.append("–î–ª—è SFTP —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å KNOWN_HOSTS_PATH –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π —Ö–æ—Å—Ç–æ–≤")
        
        if issues:
            print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
            for issue in issues:
                print(f"   - {issue}")
            print()
    
    @validator('cors_origins', pre=True)
    def parse_cors_origins(cls, v):
        """–ü–∞—Ä—Å–∏–Ω–≥ CORS origins –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if isinstance(v, str):
            return [origin.strip() for origin in v.split(',') if origin.strip()]
        return v
    
    @validator('cors_allow_methods', pre=True)
    def parse_cors_methods(cls, v):
        """–ü–∞—Ä—Å–∏–Ω–≥ CORS –º–µ—Ç–æ–¥–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if isinstance(v, str):
            return [method.strip().upper() for method in v.split(',') if method.strip()]
        return v
    
    @validator('allowed_extensions', pre=True)
    def parse_allowed_extensions(cls, v):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if isinstance(v, str):
            extensions = [ext.strip().lower() for ext in v.split(',') if ext.strip()]
            return {ext if ext.startswith('.') else f'.{ext}' for ext in extensions}
        return v
    
    # ====== –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ======
    
    @property
    def CLIENT_TOKENS(self) -> Dict[str, str]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.client_tokens
    
    @property
    def HOST(self) -> str:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.host
    
    @property
    def PORT(self) -> int:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.port
    
    @property
    def DEBUG(self) -> bool:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.debug
    
    @property
    def USE_FTPS(self) -> bool:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.use_ftps
    
    @property
    def FTP_TIMEOUT(self) -> int:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.ftp_timeout
    
    @property
    def TEMP_DIR(self) -> str:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.temp_dir
    
    @property
    def MAX_FILE_SIZE(self) -> int:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.max_file_size
    
    @property
    def CHUNK_SIZE(self) -> int:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.chunk_size
    
    @property
    def LOG_LEVEL(self) -> str:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.log_level.value
    
    @property
    def LOG_FILE(self) -> str:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API"""
        return self.log_file
    
    def validate_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        return token in self.client_tokens
    
    def get_client_name(self, token: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–æ–∫–µ–Ω—É"""
        return self.client_tokens.get(token, "Unknown Client")
    
    def is_file_allowed(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        file_ext = Path(filename).suffix.lower()
        return file_ext in self.allowed_extensions
    
    @staticmethod
    def generate_token(length: int = 32) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        return secrets.token_hex(length // 2)  # hex –¥–∞–µ—Ç –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
try:
    settings = Settings()
except ValueError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤
temp_path = Path(settings.temp_dir)
temp_path.mkdir(parents=True, exist_ok=True)

log_path = Path(settings.log_file).parent
log_path.mkdir(parents=True, exist_ok=True)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if settings.debug:
    print(f"üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:")
    print(f"   –¢–æ–∫–µ–Ω–æ–≤: {len(settings.client_tokens)}")
    print(f"   –ü—Ä–æ—Ç–æ–∫–æ–ª: {settings.default_protocol.value}")
    print(f"   CORS: {settings.cors_origins}")
    print(f"   Rate Limit: {settings.rate_limit_enabled}")
    print(f"   –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {settings.max_file_size // (1024*1024)} MB") 