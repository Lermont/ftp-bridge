#!/usr/bin/env python3
"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è FTP Bridge v2.0.0
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã, –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
"""

import os
import sys
import json
import time
import shutil
import argparse
import secrets
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple

def get_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        from config import settings
        return settings
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª .env –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        sys.exit(1)

class TokenManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
    
    def __init__(self):
        self.settings = get_settings()
    
    def list_tokens(self, output_format: str = "table") -> Dict:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        tokens_info = []
        
        for token, client_name in self.settings.client_tokens.items():
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–∞
            quality = self._assess_token_quality(token)
            
            tokens_info.append({
                "client_name": client_name,
                "token_preview": f"{token[:8]}{'*' * (len(token) - 8)}",
                "length": len(token),
                "quality": quality["level"],
                "issues": quality["issues"]
            })
        
        result = {
            "total_tokens": len(tokens_info),
            "tokens": tokens_info,
            "security_summary": self._get_security_summary()
        }
        
        if output_format == "json":
            return result
        else:
            self._print_tokens_table(result)
            return result
    
    def _assess_token_quality(self, token: str) -> Dict:
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–∞"""
        issues = []
        
        if len(token) < 16:
            issues.append("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (< 16 —Å–∏–º–≤–æ–ª–æ–≤)")
        elif len(token) < 32:
            issues.append("–ö–æ—Ä–æ—Ç–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 32+ —Å–∏–º–≤–æ–ª–æ–≤)")
        
        if token.lower() in ['password', 'secret', 'token', 'key']:
            issues.append("–°–ª–∞–±—ã–π –∏–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π")
        
        if len(set(token)) < len(token) * 0.6:
            issues.append("–ù–∏–∑–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if not issues:
            level = "–û—Ç–ª–∏—á–Ω—ã–π"
        elif len(issues) == 1 and "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è" in issues[0]:
            level = "–•–æ—Ä–æ—à–∏–π"
        elif len(issues) <= 2:
            level = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π"
        else:
            level = "–°–ª–∞–±—ã–π"
        
        return {"level": level, "issues": issues}
    
    def _get_security_summary(self) -> Dict:
        """–°–≤–æ–¥–∫–∞ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        tokens = list(self.settings.client_tokens.keys())
        
        weak_tokens = sum(1 for token in tokens if len(token) < 16)
        short_tokens = sum(1 for token in tokens if 16 <= len(token) < 32)
        strong_tokens = sum(1 for token in tokens if len(token) >= 32)
        
        return {
            "total": len(tokens),
            "weak": weak_tokens,
            "short": short_tokens,
            "strong": strong_tokens,
            "recommendations": self._get_security_recommendations(weak_tokens, short_tokens)
        }
    
    def _get_security_recommendations(self, weak_count: int, short_count: int) -> List[str]:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        recommendations = []
        
        if weak_count > 0:
            recommendations.append(f"–ó–∞–º–µ–Ω–∏—Ç–µ {weak_count} —Å–ª–∞–±—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        
        if short_count > 0:
            recommendations.append(f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã {short_count} –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        
        if not recommendations:
            recommendations.append("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–∞")
        
        return recommendations
    
    def _print_tokens_table(self, data: Dict):
        """–í—ã–≤–æ–¥ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–∫–µ–Ω–æ–≤"""
        print("üîë –¢–û–ö–ï–ù–´ –î–û–°–¢–£–ü–ê")
        print("=" * 80)
        
        if not data["tokens"]:
            print("‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'–ö–ª–∏–µ–Ω—Ç':<20} {'–¢–æ–∫–µ–Ω':<20} {'–î–ª–∏–Ω–∞':<6} {'–ö–∞—á–µ—Å—Ç–≤–æ':<15} {'–ü—Ä–æ–±–ª–µ–º—ã'}")
        print("-" * 80)
        
        # –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤
        for token_info in data["tokens"]:
            issues_str = ", ".join(token_info["issues"]) if token_info["issues"] else "–ù–µ—Ç"
            print(f"{token_info['client_name']:<20} "
                  f"{token_info['token_preview']:<20} "
                  f"{token_info['length']:<6} "
                  f"{token_info['quality']:<15} "
                  f"{issues_str}")
        
        # –°–≤–æ–¥–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        summary = data["security_summary"]
        print("\nüìä –°–í–û–î–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
        print(f"   –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {summary['total']}")
        print(f"   –°–∏–ª—å–Ω—ã—Ö (32+ —Å–∏–º–≤–æ–ª–æ–≤): {summary['strong']}")
        print(f"   –ö–æ—Ä–æ—Ç–∫–∏—Ö (16-31 —Å–∏–º–≤–æ–ª): {summary['short']}")
        print(f"   –°–ª–∞–±—ã—Ö (< 16 —Å–∏–º–≤–æ–ª–æ–≤): {summary['weak']}")
        
        if summary["recommendations"]:
            print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for rec in summary["recommendations"]:
                print(f"   - {rec}")
    
    def generate_token(self, length: int = 32, client_name: str = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        if length < 16:
            print("‚ö†Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: 16 —Å–∏–º–≤–æ–ª–æ–≤")
            length = 16
        
        token = secrets.token_hex(length // 2)
        
        print(f"üîë –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:")
        print(f"   –î–ª–∏–Ω–∞: {len(token)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –¢–æ–∫–µ–Ω: {token}")
        
        if client_name:
            env_var = f"FTP_BRIDGE_TOKEN_{client_name.upper().replace(' ', '_')}"
            print(f"\nüìù –î–æ–±–∞–≤—å—Ç–µ –≤ .env:")
            print(f"   {env_var}={token}")
        
        print("\nüîí –í–ê–ñ–ù–û:")
        print("   - –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ")
        print("   - –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –ø–æ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º")
        print("   - –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ —Ç–æ–∫–µ–Ω—ã")
        
        return token
    
    def validate_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞"""
        is_valid = self.settings.validate_token(token)
        client_name = self.settings.get_client_name(token) if is_valid else None
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: {token[:8]}***")
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –í–∞–ª–∏–¥–Ω—ã–π' if is_valid else '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π'}")
        if client_name:
            print(f"   –ö–ª–∏–µ–Ω—Ç: {client_name}")
        
        return is_valid

class SystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.settings = get_settings()
    
    def health_check(self, output_format: str = "table") -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
        temp_dir_check = self._check_temp_directory()
        checks.append(temp_dir_check)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
        log_check = self._check_log_files()
        checks.append(log_check)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_check = self._check_configuration()
        checks.append(config_check)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        security_check = self._check_security_settings()
        checks.append(security_check)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_check = self._check_performance_settings()
        checks.append(performance_check)
        
        # –°–≤–æ–¥–∫–∞
        passed = sum(1 for check in checks if check["status"] == "OK")
        warnings = sum(1 for check in checks if check["status"] == "WARNING")
        errors = sum(1 for check in checks if check["status"] == "ERROR")
        
        result = {
            "timestamp": datetime.now().isoformat(),
            "overall_status": "ERROR" if errors > 0 else "WARNING" if warnings > 0 else "OK",
            "checks": checks,
            "summary": {
                "total": len(checks),
                "passed": passed,
                "warnings": warnings,
                "errors": errors
            }
        }
        
        if output_format == "json":
            return result
        else:
            self._print_health_report(result)
            return result
    
    def _check_temp_directory(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"""
        temp_path = Path(self.settings.temp_dir)
        
        if not temp_path.exists():
            return {
                "name": "–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥",
                "status": "ERROR",
                "message": f"–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {temp_path}",
                "details": {"path": str(temp_path), "exists": False}
            }
        
        if not temp_path.is_dir():
            return {
                "name": "–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥",
                "status": "ERROR",
                "message": f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞—Ç–∞–ª–æ–≥–æ–º: {temp_path}",
                "details": {"path": str(temp_path), "is_directory": False}
            }
        
        if not os.access(temp_path, os.W_OK):
            return {
                "name": "–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥",
                "status": "ERROR",
                "message": f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏: {temp_path}",
                "details": {"path": str(temp_path), "writable": False}
            }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        free_space = shutil.disk_usage(temp_path).free
        free_space_mb = free_space // (1024 * 1024)
        
        if free_space_mb < 100:  # –ú–µ–Ω–µ–µ 100 MB
            status = "WARNING"
            message = f"–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: {free_space_mb} MB"
        else:
            status = "OK"
            message = f"–ö–∞—Ç–∞–ª–æ–≥ –≥–æ—Ç–æ–≤, —Å–≤–æ–±–æ–¥–Ω–æ: {free_space_mb} MB"
        
        return {
            "name": "–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥",
            "status": status,
            "message": message,
            "details": {
                "path": str(temp_path),
                "exists": True,
                "writable": True,
                "free_space_mb": free_space_mb
            }
        }
    
    def _check_log_files(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤"""
        log_path = Path(self.settings.log_file)
        log_dir = log_path.parent
        
        if not log_dir.exists():
            return {
                "name": "–§–∞–π–ª—ã –ª–æ–≥–æ–≤",
                "status": "ERROR",
                "message": f"–ö–∞—Ç–∞–ª–æ–≥ –ª–æ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {log_dir}",
                "details": {"log_dir": str(log_dir), "exists": False}
            }
        
        if not os.access(log_dir, os.W_OK):
            return {
                "name": "–§–∞–π–ª—ã –ª–æ–≥–æ–≤",
                "status": "ERROR",
                "message": f"–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –ª–æ–≥–æ–≤: {log_dir}",
                "details": {"log_dir": str(log_dir), "writable": False}
            }
        
        details = {
            "log_file": str(log_path),
            "log_dir": str(log_dir),
            "rotation_enabled": self.settings.log_rotation_enabled,
            "max_size_mb": self.settings.log_max_size // (1024 * 1024),
            "backup_count": self.settings.log_backup_count
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ–≥–∞
        if log_path.exists():
            log_size = log_path.stat().st_size
            log_size_mb = log_size // (1024 * 1024)
            details["current_size_mb"] = log_size_mb
            
            if log_size > self.settings.log_max_size and not self.settings.log_rotation_enabled:
                return {
                    "name": "–§–∞–π–ª—ã –ª–æ–≥–æ–≤",
                    "status": "WARNING",
                    "message": f"–õ–æ–≥ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π ({log_size_mb} MB), –Ω–æ —Ä–æ—Ç–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                    "details": details
                }
        
        return {
            "name": "–§–∞–π–ª—ã –ª–æ–≥–æ–≤",
            "status": "OK",
            "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã",
            "details": details
        }
    
    def _check_configuration(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        if len(self.settings.client_tokens) == 0:
            issues.append("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
        if not (1 <= self.settings.port <= 65535):
            issues.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç: {self.settings.port}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if self.settings.max_file_size < 1024 * 1024:  # –ú–µ–Ω–µ–µ 1 MB
            issues.append("–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞")
        
        if issues:
            return {
                "name": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
                "status": "ERROR",
                "message": f"–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(issues)}",
                "details": {"issues": issues}
            }
        
        return {
            "name": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
            "status": "OK",
            "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞",
            "details": {
                "tokens_count": len(self.settings.client_tokens),
                "port": self.settings.port,
                "max_file_size_mb": self.settings.max_file_size // (1024 * 1024),
                "debug_mode": self.settings.debug
            }
        }
    
    def _check_security_settings(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        issues = []
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
        weak_tokens = [token for token in self.settings.client_tokens.keys() if len(token) < 16]
        if weak_tokens:
            issues.append(f"–°–ª–∞–±—ã–µ —Ç–æ–∫–µ–Ω—ã: {len(weak_tokens)} —à—Ç.")
        
        short_tokens = [token for token in self.settings.client_tokens.keys() if 16 <= len(token) < 32]
        if short_tokens:
            warnings.append(f"–ö–æ—Ä–æ—Ç–∫–∏–µ —Ç–æ–∫–µ–Ω—ã: {len(short_tokens)} —à—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
        if not self.settings.debug and "*" in self.settings.cors_origins:
            issues.append("CORS —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ª—é–±—ã–µ –¥–æ–º–µ–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Rate Limiting
        if not self.settings.rate_limit_enabled:
            warnings.append("Rate limiting –æ—Ç–∫–ª—é—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if self.settings.default_protocol.value == "ftp" and not self.settings.use_ftps:
            warnings.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π FTP")
        
        if issues:
            status = "ERROR"
            message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {', '.join(issues)}"
        elif warnings:
            status = "WARNING"
            message = f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {', '.join(warnings)}"
        else:
            status = "OK"
            message = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
        
        return {
            "name": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            "status": status,
            "message": message,
            "details": {
                "issues": issues,
                "warnings": warnings,
                "cors_origins": self.settings.cors_origins,
                "rate_limit_enabled": self.settings.rate_limit_enabled,
                "default_protocol": self.settings.default_protocol.value,
                "use_ftps": self.settings.use_ftps
            }
        }
    
    def _check_performance_settings(self) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        warnings = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–æ–≤
        if self.settings.chunk_size < 4096:  # –ú–µ–Ω–µ–µ 4 KB
            warnings.append("–ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        elif self.settings.chunk_size > 1024 * 1024:  # –ë–æ–ª–µ–µ 1 MB
            warnings.append("–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
        if self.settings.ftp_timeout < 10:
            warnings.append("–ö–æ—Ä–æ—Ç–∫–∏–π FTP —Ç–∞–π–º–∞—É—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ–±—Ä—ã–≤–∞–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        elif self.settings.ftp_timeout > 300:
            warnings.append("–î–ª–∏–Ω–Ω—ã–π FTP —Ç–∞–π–º–∞—É—Ç –º–æ–∂–µ—Ç –∑–∞–º–µ–¥–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Rate Limiting
        if self.settings.rate_limit_enabled and self.settings.rate_limit_requests > 1000:
            warnings.append("–í—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –º–æ–∂–µ—Ç –Ω–µ –∑–∞—â–∏—Ç–∏—Ç—å –æ—Ç –∞—Ç–∞–∫")
        
        status = "WARNING" if warnings else "OK"
        message = f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {', '.join(warnings)}" if warnings else "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã"
        
        return {
            "name": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            "status": status,
            "message": message,
            "details": {
                "warnings": warnings,
                "chunk_size_kb": self.settings.chunk_size // 1024,
                "ftp_timeout": self.settings.ftp_timeout,
                "rate_limit_requests": self.settings.rate_limit_requests if self.settings.rate_limit_enabled else None
            }
        }
    
    def _print_health_report(self, data: Dict):
        """–í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        print("üè• –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {data['timestamp']}")
        print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {self._get_status_emoji(data['overall_status'])} {data['overall_status']}")
        print()
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        for check in data["checks"]:
            emoji = self._get_status_emoji(check["status"])
            print(f"{emoji} {check['name']}: {check['status']}")
            print(f"   {check['message']}")
            
            if check.get("details") and isinstance(check["details"], dict):
                for key, value in check["details"].items():
                    if key not in ["issues", "warnings"]:
                        print(f"   {key}: {value}")
            print()
        
        # –°–≤–æ–¥–∫–∞
        summary = data["summary"]
        print("üìä –°–í–û–î–ö–ê:")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {summary['passed']}")
        print(f"   ‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {summary['warnings']}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {summary['errors']}")
        print(f"   üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {summary['total']}")
    
    def _get_status_emoji(self, status: str) -> str:
        """–≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        return {
            "OK": "‚úÖ",
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå"
        }.get(status, "‚ùì")

class MaintenanceTools:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.settings = get_settings()
    
    def cleanup_temp_files(self, max_age_hours: int = 24) -> Dict:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        temp_dir = Path(self.settings.temp_dir)
        
        if not temp_dir.exists():
            return {
                "status": "error",
                "message": f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {temp_dir}",
                "cleaned_files": 0,
                "freed_space_mb": 0
            }
        
        cutoff_time = time.time() - (max_age_hours * 3600)
        cleaned_files = 0
        freed_space = 0
        
        for file_path in temp_dir.glob("ftp_bridge_*"):
            try:
                if file_path.is_file() and file_path.stat().st_mtime < cutoff_time:
                    file_size = file_path.stat().st_size
                    file_path.unlink()
                    cleaned_files += 1
                    freed_space += file_size
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
        
        freed_space_mb = freed_space // (1024 * 1024)
        
        return {
            "status": "success",
            "message": f"–û—á–∏—â–µ–Ω–æ {cleaned_files} —Ñ–∞–π–ª–æ–≤, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {freed_space_mb} MB",
            "cleaned_files": cleaned_files,
            "freed_space_mb": freed_space_mb,
            "max_age_hours": max_age_hours
        }
    
    def validate_configuration(self) -> Dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
            from config import Settings
            test_settings = Settings()
            
            return {
                "status": "success",
                "message": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞",
                "details": {
                    "tokens_count": len(test_settings.client_tokens),
                    "protocols_available": ["ftp", "ftps"] + (["sftp"] if hasattr(test_settings, 'sftp_port') else [])
                }
            }
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}",
                "details": {"error": str(e)}
            }
    
    def backup_configuration(self, backup_dir: str = "backups") -> Dict:
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        backup_path = Path(backup_dir)
        backup_path.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = backup_path / f"config_backup_{timestamp}.env"
        
        try:
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
            env_file = Path(".env")
            if env_file.exists():
                shutil.copy2(env_file, backup_file)
                
                return {
                    "status": "success",
                    "message": f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {backup_file}",
                    "backup_file": str(backup_file),
                    "timestamp": timestamp
                }
            else:
                return {
                    "status": "error",
                    "message": "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    "backup_file": None
                }
        except Exception as e:
            return {
                "status": "error",
                "message": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}",
                "backup_file": None
            }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã FTP Bridge v2.0.0",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python admin_utils.py tokens list
  python admin_utils.py tokens generate --length 32 --client "Power BI"
  python admin_utils.py monitor health
  python admin_utils.py maintenance cleanup --max-age-hours 12
  python admin_utils.py maintenance validate
        """
    )
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–∫–µ–Ω–æ–≤
    tokens_parser = subparsers.add_parser("tokens", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏")
    tokens_subparsers = tokens_parser.add_subparsers(dest="tokens_action")
    
    # –°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
    list_parser = tokens_subparsers.add_parser("list", help="–°–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤")
    list_parser.add_argument("--json", action="store_true", help="–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    generate_parser = tokens_subparsers.add_parser("generate", help="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
    generate_parser.add_argument("--length", type=int, default=32, help="–î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 32)")
    generate_parser.add_argument("--client", help="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    validate_parser = tokens_subparsers.add_parser("validate", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞")
    validate_parser.add_argument("token", help="–¢–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    # –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_parser = subparsers.add_parser("monitor", help="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    monitor_subparsers = monitor_parser.add_subparsers(dest="monitor_action")
    
    # Health check
    health_parser = monitor_subparsers.add_parser("health", help="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
    health_parser.add_argument("--json", action="store_true", help="–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
    
    # –ö–æ–º–∞–Ω–¥—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    maintenance_parser = subparsers.add_parser("maintenance", help="–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    maintenance_subparsers = maintenance_parser.add_subparsers(dest="maintenance_action")
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    cleanup_parser = maintenance_subparsers.add_parser("cleanup", help="–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    cleanup_parser.add_argument("--max-age-hours", type=int, default=24, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å–∞—Ö")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    maintenance_subparsers.add_parser("validate", help="–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    backup_parser = maintenance_subparsers.add_parser("backup", help="–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    backup_parser.add_argument("--dir", default="backups", help="–ö–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        if args.command == "tokens":
            token_manager = TokenManager()
            
            if args.tokens_action == "list":
                token_manager.list_tokens("json" if args.json else "table")
            elif args.tokens_action == "generate":
                token_manager.generate_token(args.length, args.client)
            elif args.tokens_action == "validate":
                token_manager.validate_token(args.token)
            else:
                tokens_parser.print_help()
        
        elif args.command == "monitor":
            monitor = SystemMonitor()
            
            if args.monitor_action == "health":
                result = monitor.health_check("json" if args.json else "table")
                if args.json:
                    print(json.dumps(result, indent=2))
            else:
                monitor_parser.print_help()
        
        elif args.command == "maintenance":
            maintenance = MaintenanceTools()
            
            if args.maintenance_action == "cleanup":
                result = maintenance.cleanup_temp_files(args.max_age_hours)
                print(f"üßπ {result['message']}")
            elif args.maintenance_action == "validate":
                result = maintenance.validate_configuration()
                emoji = "‚úÖ" if result["status"] == "success" else "‚ùå"
                print(f"{emoji} {result['message']}")
            elif args.maintenance_action == "backup":
                result = maintenance.backup_configuration(args.dir)
                emoji = "‚úÖ" if result["status"] == "success" else "‚ùå"
                print(f"{emoji} {result['message']}")
            else:
                maintenance_parser.print_help()
        
        else:
            parser.print_help()
    
    except KeyboardInterrupt:
        print("\nüëã –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 