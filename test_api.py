#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FTP Bridge API v2.1.0
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç—ã –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: HEAD endpoint, path sanitizer, PII masking, auto-chunk tuning
"""

import time
import requests
import json
import os
import tempfile
from pathlib import Path
import socket
import subprocess
import sys
from urllib.parse import urlencode

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class TestConfig:
    def __init__(self):
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try:
            from config import settings
            self.BASE_URL = f"http://{settings.host}:{settings.port}"
            self.TOKENS = list(settings.client_tokens.keys())
            self.CLIENT_NAMES = list(settings.client_tokens.values())
            self.RATE_LIMIT_ENABLED = settings.rate_limit_enabled
            self.RATE_LIMIT_REQUESTS = settings.rate_limit_requests
            self.RATE_LIMIT_WINDOW = settings.rate_limit_window
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {len(self.TOKENS)} —Ç–æ–∫–µ–Ω–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            print("   –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            self.BASE_URL = "http://127.0.0.1:8000"
            self.TOKENS = []
            self.CLIENT_NAMES = []
            self.RATE_LIMIT_ENABLED = True
            self.RATE_LIMIT_REQUESTS = 100
            self.RATE_LIMIT_WINDOW = 3600
        
        self.VALID_TOKEN = self.TOKENS[0] if self.TOKENS else "dummy_token_for_offline_tests"
        self.INVALID_TOKEN = "invalid_token_12345678"
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FTP
        self.TEST_FTP = {
            "host": "test.rebex.net",  # –ü—É–±–ª–∏—á–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π FTP
            "user": "demo",
            "password": "password",
            "path": "/",
            "file": "readme.txt"
        }
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SFTP (–ø—É–±–ª–∏—á–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä)
        self.TEST_SFTP = {
            "host": "test.rebex.net",
            "user": "demo",
            "password": "password",
            "path": "/",
            "file": "readme.txt",
            "protocol": "sftp"
        }

def wait_for_server(base_url: str, timeout: int = 30) -> bool:
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"üîÑ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {base_url}")
    
    for attempt in range(timeout):
        try:
            response = requests.get(f"{base_url}/health", timeout=2)
            if response.status_code == 200:
                print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                return True
        except requests.exceptions.RequestException:
            pass
        
        if attempt < timeout - 1:
            time.sleep(1)
    
    print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {timeout} —Å–µ–∫—É–Ω–¥")
    return False

def test_basic_endpoints(config: TestConfig):
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    results = []
    
    # –¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    try:
        response = requests.get(config.BASE_URL)
        if response.status_code == 200:
            data = response.json()
            if "service" in data and data["service"] == "FTP Bridge":
                results.append("‚úÖ Root endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   –í–µ—Ä—Å–∏—è: {data.get('version', 'unknown')}")
                print(f"   –ü—Ä–æ—Ç–æ–∫–æ–ª—ã: {data.get('config', {}).get('protocols', [])}")
            else:
                results.append("‚ùå Root endpoint: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
        else:
            results.append(f"‚ùå Root endpoint: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        results.append(f"‚ùå Root endpoint: –æ—à–∏–±–∫–∞ {e}")
    
    # –¢–µ—Å—Ç health check
    try:
        response = requests.get(f"{config.BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            if data.get("status") in ["healthy", "degraded"]:
                results.append("‚úÖ Health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   –°—Ç–∞—Ç—É—Å: {data['status']}")
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {data.get('active_tokens', 0)}")
                print(f"   –ü—Ä–æ—Ç–æ–∫–æ–ª—ã: {data.get('protocols_available', [])}")
            else:
                results.append("‚ùå Health check: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        else:
            results.append(f"‚ùå Health check: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        results.append(f"‚ùå Health check: –æ—à–∏–±–∫–∞ {e}")
    
    # –¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    try:
        response = requests.get(f"{config.BASE_URL}/docs")
        if response.status_code == 200:
            results.append("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            results.append(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        results.append(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ {e}")
    
    return results

def test_head_endpoint(config: TestConfig):
    """–¢–µ—Å—Ç HEAD endpoint –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HEAD endpoint...")
    results = []
    
    if not config.TOKENS:
        results.append("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return results
    
    headers = {"Authorization": f"Bearer {config.VALID_TOKEN}"}
    
    # –¢–µ—Å—Ç HEAD –∑–∞–ø—Ä–æ—Å–∞ (–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ —Ç–µ–ª–∞)
    try:
        params = {
            "host": config.TEST_FTP["host"],
            "user": config.TEST_FTP["user"],
            "password": config.TEST_FTP["password"],
            "path": f"{config.TEST_FTP['path']}{config.TEST_FTP['file']}"
        }
        response = requests.head(f"{config.BASE_URL}/download", params=params, headers=headers, timeout=10)
        
        if response.status_code == 200:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            required_headers = ["X-File-Size", "X-Protocol", "X-File-Name"]
            missing_headers = [h for h in required_headers if h not in response.headers]
            
            if not missing_headers:
                results.append("‚úÖ HEAD endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
                print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {response.headers.get('X-File-Size')} –±–∞–π—Ç")
                print(f"   –ü—Ä–æ—Ç–æ–∫–æ–ª: {response.headers.get('X-Protocol')}")
                print(f"   –ò–º—è —Ñ–∞–π–ª–∞: {response.headers.get('X-File-Name')}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–µ
                if len(response.content) == 0:
                    results.append("‚úÖ HEAD –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–ª–∞")
                else:
                    results.append("‚ö†Ô∏è  HEAD –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–ª–æ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
            else:
                results.append(f"‚ùå HEAD endpoint: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ {missing_headers}")
        else:
            results.append(f"‚ùå HEAD endpoint: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
    except requests.exceptions.Timeout:
        results.append("‚ö†Ô∏è  HEAD endpoint: —Ç–∞–π–º–∞—É—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    except Exception as e:
        results.append(f"‚ùå HEAD endpoint: –æ—à–∏–±–∫–∞ {e}")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    try:
        params = {"host": "nonexistent.example.com", "user": "fake", "password": "fake", "path": "/fake.txt"}
        response = requests.head(f"{config.BASE_URL}/download", params=params, headers=headers, timeout=5)
        
        if response.status_code in [400, 401, 404, 500]:
            results.append("‚úÖ HEAD endpoint –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏")
        else:
            results.append(f"‚ö†Ô∏è  HEAD endpoint —Å –æ—à–∏–±–æ—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except requests.exceptions.Timeout:
        results.append("‚úÖ HEAD endpoint –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç—ã")
    except Exception as e:
        results.append(f"‚ùå HEAD endpoint —Å –æ—à–∏–±–æ—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: –æ—à–∏–±–∫–∞ {e}")
    
    return results

def test_degraded_mode(config: TestConfig):
    """–¢–µ—Å—Ç —Ä–µ–∂–∏–º–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏"""
    print("\nüî∂ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ degraded mode...")
    results = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ health check
    try:
        response = requests.get(f"{config.BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            current_status = data.get("status", "unknown")
            degraded_mode = data.get("degraded_mode", False)
            
            if current_status == "degraded" or degraded_mode:
                results.append("üî∂ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏")
                
                # –í —Ä–µ–∂–∏–º–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ /download –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 503
                try:
                    headers = {"Authorization": "Bearer dummy_token"}
                    params = {"host": "test.com", "user": "test", "password": "test", "path": "/test.txt"}
                    response = requests.get(f"{config.BASE_URL}/download", params=params, headers=headers)
                    
                    if response.status_code == 503:
                        results.append("‚úÖ –í degraded mode /download –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
                    else:
                        results.append(f"‚ö†Ô∏è  –í degraded mode /download —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                except Exception as e:
                    results.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è degraded mode download: {e}")
                
                # Health –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º
                results.append("‚úÖ /health –¥–æ—Å—Ç—É–ø–µ–Ω –≤ degraded mode")
                
            else:
                results.append(f"‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (—Å—Ç–∞—Ç—É—Å: {current_status})")
                
        else:
            results.append(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
            
    except Exception as e:
        results.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ degraded mode: {e}")
    
    return results

def test_auto_chunk_tuning(config: TestConfig):
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–æ–≤"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ auto-chunk tuning...")
    results = []
    
    if not config.TOKENS:
        results.append("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return results
    
    headers = {"Authorization": f"Bearer {config.VALID_TOKEN}"}
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    try:
        params = {
            "host": config.TEST_FTP["host"],
            "user": config.TEST_FTP["user"], 
            "password": config.TEST_FTP["password"],
            "path": f"{config.TEST_FTP['path']}{config.TEST_FTP['file']}"
        }
        
        response = requests.get(f"{config.BASE_URL}/download", params=params, headers=headers, timeout=15, stream=True)
        
        if response.status_code == 200:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∞–≤—Ç–æ—Ç—é–Ω–∏–Ω–≥–∞ —á–∞–Ω–∫–æ–≤
            auto_tuned = response.headers.get("X-Auto-Chunk-Tuned", "false")
            file_size = int(response.headers.get("X-File-Size", "0"))
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 10MB, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ—Ç—é–Ω–∏–Ω–≥
            if file_size > 10 * 1024 * 1024:
                if auto_tuned == "true":
                    results.append("‚úÖ Auto-chunk tuning –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞")
                else:
                    results.append("‚ö†Ô∏è  Auto-chunk tuning –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ñ–∞–π–ª–∞")
            else:
                if auto_tuned == "false":
                    results.append("‚úÖ Auto-chunk tuning –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª–∞")
                else:
                    results.append("‚ö†Ô∏è  Auto-chunk tuning –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Ñ–∞–π–ª–∞")
            
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            print(f"   Auto-chunk tuned: {auto_tuned}")
            
            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            response.close()
            results.append("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ auto-chunk tuning –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
        else:
            results.append(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å auto-chunk tuning: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
    except requests.exceptions.Timeout:
        results.append("‚ö†Ô∏è  Auto-chunk tuning: —Ç–∞–π–º–∞—É—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    except Exception as e:
        results.append(f"‚ùå Auto-chunk tuning: –æ—à–∏–±–∫–∞ {e}")
    
    return results

def test_authentication(config: TestConfig):
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    results = []
    
    if not config.TOKENS:
        results.append("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return results
    
    # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    try:
        response = requests.get(f"{config.BASE_URL}/download")
        if response.status_code == 403:
            results.append("‚úÖ –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        else:
            results.append(f"‚ùå –ó–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        results.append(f"‚ùå –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: –æ—à–∏–±–∫–∞ {e}")
    
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    try:
        headers = {"Authorization": f"Bearer {config.INVALID_TOKEN}"}
        response = requests.get(f"{config.BASE_URL}/download", headers=headers)
        if response.status_code == 403:
            results.append("‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        else:
            results.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        results.append(f"‚ùå –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: –æ—à–∏–±–∫–∞ {e}")
    
    # –¢–µ—Å—Ç —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
    try:
        headers = {"Authorization": f"Bearer {config.VALID_TOKEN}"}
        response = requests.get(f"{config.BASE_URL}/download", headers=headers)
        if response.status_code == 422:  # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            results.append("‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω—è—Ç (–æ—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∂–∏–¥–∞–µ–º–∞)")
        else:
            results.append(f"‚ö†Ô∏è  –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        results.append(f"‚ùå –¢–µ—Å—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: –æ—à–∏–±–∫–∞ {e}")
    
    return results

def test_parameter_validation(config: TestConfig):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    results = []
    
    if not config.TOKENS:
        results.append("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return results
    
    headers = {"Authorization": f"Bearer {config.VALID_TOKEN}"}
    
    # –¢–µ—Å—Ç path sanitizer –∏ –∑–∞—â–∏—Ç—ã –æ—Ç path traversal 
    dangerous_paths = [
        "../etc/passwd",
        "../../config.py", 
        "/path/with/../traversal/file.txt",
        "\\windows\\system32\\config\\sam",
        "/path//double/slash/file.txt",
        "",  # –ü—É—Å—Ç–æ–π –ø—É—Ç—å
        "path_without_leading_slash.txt"
    ]
    for dangerous_path in dangerous_paths:
        try:
            params = {
                "host": "example.com",
                "user": "test", 
                "password": "test",
                "path": dangerous_path
            }
            response = requests.get(f"{config.BASE_URL}/download", params=params, headers=headers)
            if response.status_code == 400:
                results.append(f"‚úÖ –û–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {dangerous_path}")
            else:
                results.append(f"‚ö†Ô∏è  Path traversal: {dangerous_path} - —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            results.append(f"‚ùå Path traversal —Ç–µ—Å—Ç: –æ—à–∏–±–∫–∞ {e}")
    
    # –¢–µ—Å—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    invalid_extensions = ["script.exe", "virus.bat", "backdoor.sh", "config.conf"]
    for invalid_file in invalid_extensions:
        try:
            params = {
                "host": "example.com",
                "user": "test", 
                "password": "test",
                "path": "/",
                "file": invalid_file
            }
            response = requests.get(f"{config.BASE_URL}/download", params=params, headers=headers)
            if response.status_code == 400:
                results.append(f"‚úÖ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {invalid_file}")
            else:
                results.append(f"‚ö†Ô∏è  –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {invalid_file} - —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            results.append(f"‚ùå –¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: –æ—à–∏–±–∫–∞ {e}")
    
    # –¢–µ—Å—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    valid_files = ["data.csv", "report.xlsx", "document.pdf", "config.json"]
    for valid_file in valid_files:
        try:
            params = {
                "host": "nonexistent.example.com",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–æ—Å—Ç
                "user": "test",
                "password": "test", 
                "path": "/",
                "file": valid_file
            }
            response = requests.get(f"{config.BASE_URL}/download", params=params, headers=headers)
            if response.status_code != 400:  # –ù–µ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                results.append(f"‚úÖ –î–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {valid_file}")
            else:
                results.append(f"‚ùå –î–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {valid_file}")
        except Exception as e:
            results.append(f"‚ùå –¢–µ—Å—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: –æ—à–∏–±–∫–∞ {e}")
    
    return results

def test_protocol_support(config: TestConfig):
    """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤...")
    results = []
    
    if not config.TOKENS:
        results.append("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return results
    
    headers = {"Authorization": f"Bearer {config.VALID_TOKEN}"}
    
    # –¢–µ—Å—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    try:
        params = {
            "host": "example.com",
            "user": "test",
            "password": "test",
            "path": "/",
            "file": "test.txt",
            "protocol": "invalid_protocol"
        }
        response = requests.get(f"{config.BASE_URL}/download", params=params, headers=headers)
        if response.status_code == 400:
            results.append("‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        else:
            results.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        results.append(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: –æ—à–∏–±–∫–∞ {e}")
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SFTP
    try:
        import paramiko
        results.append("‚úÖ SFTP –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (paramiko —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        
        # –¢–µ—Å—Ç SFTP –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = {
            "host": "nonexistent.sftp.com",
            "user": "test",
            "password": "test",
            "path": "/",
            "file": "test.txt",
            "protocol": "sftp"
        }
        response = requests.get(f"{config.BASE_URL}/download", params=params, headers=headers)
        if response.status_code != 400:  # –ù–µ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            results.append("‚úÖ SFTP –ø—Ä–æ—Ç–æ–∫–æ–ª –ø—Ä–∏–Ω—è—Ç")
        else:
            results.append("‚ùå SFTP –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω")
            
    except ImportError:
        results.append("‚ö†Ô∏è  SFTP –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (paramiko –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        
        # –¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è SFTP –∫–æ–≥–¥–∞ paramiko –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        params = {
            "host": "example.com",
            "user": "test", 
            "password": "test",
            "path": "/",
            "file": "test.txt",
            "protocol": "sftp"
        }
        response = requests.get(f"{config.BASE_URL}/download", params=params, headers=headers)
        if response.status_code == 400:
            results.append("‚úÖ SFTP –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –±–µ–∑ paramiko")
        else:
            results.append(f"‚ùå SFTP –±–µ–∑ paramiko: —Å—Ç–∞—Ç—É—Å {response.status_code}")
    
    return results

def test_rate_limiting(config: TestConfig):
    """–¢–µ—Å—Ç rate limiting"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
    results = []
    
    if not config.RATE_LIMIT_ENABLED:
        results.append("‚ö†Ô∏è  Rate limiting –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return results
    
    if not config.TOKENS:
        results.append("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return results
    
    headers = {"Authorization": f"Bearer {config.VALID_TOKEN}"}
    
    # –ë—ã—Å—Ç—Ä—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting
    print(f"   –û—Ç–ø—Ä–∞–≤–∫–∞ 10 –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
    rate_limited = False
    
    for i in range(10):
        try:
            params = {
                "host": "nonexistent.example.com",
                "user": "test",
                "password": "test",
                "path": "/",
                "file": "test.txt"
            }
            response = requests.get(f"{config.BASE_URL}/download", params=params, headers=headers, timeout=5)
            
            if response.status_code == 429:  # Too Many Requests
                rate_limited = True
                results.append(f"‚úÖ Rate limiting —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ {i+1}")
                break
                
        except requests.exceptions.Timeout:
            results.append("‚ö†Ô∏è  Timeout - –≤–æ–∑–º–æ–∂–Ω–æ rate limiting –∞–∫—Ç–∏–≤–µ–Ω")
            break
        except Exception as e:
            results.append(f"‚ùå –û—à–∏–±–∫–∞ rate limiting —Ç–µ—Å—Ç–∞: {e}")
            break
        
        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    if not rate_limited and config.RATE_LIMIT_REQUESTS <= 10:
        results.append("‚ö†Ô∏è  Rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—Å–æ–∫–∏–π –ª–∏–º–∏—Ç)")
    elif not rate_limited:
        results.append(f"‚úÖ Rate limiting –Ω–∞—Å—Ç—Ä–æ–µ–Ω ({config.RATE_LIMIT_REQUESTS} –∑–∞–ø—Ä–æ—Å–æ–≤/{config.RATE_LIMIT_WINDOW}—Å)")
    
    return results

def test_cors_headers(config: TestConfig):
    """–¢–µ—Å—Ç CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS...")
    results = []
    
    # –¢–µ—Å—Ç CORS headers
    try:
        response = requests.options(config.BASE_URL)
        cors_headers = {
            'Access-Control-Allow-Origin',
            'Access-Control-Allow-Methods',
            'Access-Control-Allow-Headers'
        }
        
        found_headers = set(response.headers.keys()) & cors_headers
        if found_headers:
            results.append(f"‚úÖ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(found_headers)}")
        else:
            results.append("‚ö†Ô∏è  CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ CORS
        origin_header = response.headers.get('Access-Control-Allow-Origin')
        if origin_header == '*':
            results.append("‚ö†Ô∏è  CORS —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –ª—é–±—ã–µ –¥–æ–º–µ–Ω—ã (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)")
        elif origin_header:
            results.append(f"‚úÖ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ–º–µ–Ω–∞–º–∏: {origin_header}")
        
    except Exception as e:
        results.append(f"‚ùå CORS —Ç–µ—Å—Ç: –æ—à–∏–±–∫–∞ {e}")
    
    return results

def test_real_ftp_download(config: TestConfig):
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å FTP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π FTP –∑–∞–≥—Ä—É–∑–∫–∏...")
    results = []
    
    if not config.TOKENS:
        results.append("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return results
    
    headers = {"Authorization": f"Bearer {config.VALID_TOKEN}"}
    
    # –¢–µ—Å—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º FTP —Å–µ—Ä–≤–µ—Ä–æ–º
    try:
        params = config.TEST_FTP.copy()
        print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É FTP: {params['host']}")
        
        response = requests.get(
            f"{config.BASE_URL}/download", 
            params=params, 
            headers=headers,
            timeout=30  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π timeout –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        )
        
        if response.status_code == 200:
            results.append("‚úÖ FTP –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞")
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
            print(f"   Content-Type: {response.headers.get('content-type', 'unknown')}")
        elif response.status_code == 500:
            results.append("‚ö†Ô∏è  FTP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏")
        else:
            results.append(f"‚ùå FTP –∑–∞–≥—Ä—É–∑–∫–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
    except requests.exceptions.Timeout:
        results.append("‚ö†Ô∏è  FTP –∑–∞–≥—Ä—É–∑–∫–∞: timeout (—Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    except Exception as e:
        results.append(f"‚ùå FTP –∑–∞–≥—Ä—É–∑–∫–∞: –æ—à–∏–±–∫–∞ {e}")
    
    return results

def test_real_sftp_download(config: TestConfig):
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å SFTP (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π SFTP –∑–∞–≥—Ä—É–∑–∫–∏...")
    results = []
    
    if not config.TOKENS:
        results.append("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω: —Ç–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return results
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ paramiko
    try:
        import paramiko
    except ImportError:
        results.append("‚ö†Ô∏è  SFTP –ø—Ä–æ–ø—É—â–µ–Ω: paramiko –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return results
    
    headers = {"Authorization": f"Bearer {config.VALID_TOKEN}"}
    
    # –¢–µ—Å—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º SFTP —Å–µ—Ä–≤–µ—Ä–æ–º
    try:
        params = config.TEST_SFTP.copy()
        print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É SFTP: {params['host']}")
        
        response = requests.get(
            f"{config.BASE_URL}/download", 
            params=params, 
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            results.append("‚úÖ SFTP –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞")
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
        elif response.status_code == 500:
            results.append("‚ö†Ô∏è  SFTP —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏")
        else:
            results.append(f"‚ùå SFTP –∑–∞–≥—Ä—É–∑–∫–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}")
            
    except requests.exceptions.Timeout:
        results.append("‚ö†Ô∏è  SFTP –∑–∞–≥—Ä—É–∑–∫–∞: timeout (—Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
    except Exception as e:
        results.append(f"‚ùå SFTP –∑–∞–≥—Ä—É–∑–∫–∞: –æ—à–∏–±–∫–∞ {e}")
    
    return results

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ FTP Bridge API –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ v2.1.0")
    print("=" * 60)
    
    config = TestConfig()
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    if not wait_for_server(config.BASE_URL):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python start.py")
        return False
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    all_results = []
    
    test_functions = [
        ("–ë–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã", test_basic_endpoints),
        ("HEAD endpoint", test_head_endpoint),
        ("Degraded Mode", test_degraded_mode),
        ("Auto-chunk tuning", test_auto_chunk_tuning),
        ("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", test_authentication),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤", test_parameter_validation),
        ("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤", test_protocol_support),
        ("Rate Limiting", test_rate_limiting),
        ("CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏", test_cors_headers),
        ("FTP –∑–∞–≥—Ä—É–∑–∫–∞", test_real_ftp_download),
        ("SFTP –∑–∞–≥—Ä—É–∑–∫–∞", test_real_sftp_download)
    ]
    
    for test_name, test_func in test_functions:
        try:
            results = test_func(config)
            all_results.extend(results)
        except Exception as e:
            all_results.append(f"‚ùå {test_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {e}")
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed = sum(1 for r in all_results if r.startswith("‚úÖ"))
    warnings = sum(1 for r in all_results if r.startswith("‚ö†Ô∏è"))
    failed = sum(1 for r in all_results if r.startswith("‚ùå"))
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
    print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings}")
    print(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
    print(f"üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(all_results)}")
    
    if failed > 0:
        print("\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
        for result in all_results:
            if result.startswith("‚ùå"):
                print(f"   {result}")
    
    if warnings > 0:
        print("\n‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
        for result in all_results:
            if result.startswith("‚ö†Ô∏è"):
                print(f"   {result}")
    
    print("\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if failed == 0 and warnings == 0:
        print("   üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("   üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        print("   üìñ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: /docs")
        print("   ‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ .env —Ñ–∞–π–ª–µ")
    
    return failed == 0

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 