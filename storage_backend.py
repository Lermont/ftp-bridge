"""
–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å–∏—Å—Ç–µ–º–∞–º —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.
–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É FTP, FTPS –∏ SFTP —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏.
"""

import os
import re
import tempfile
from abc import ABC, abstractmethod
from ftplib import FTP, FTP_TLS
from pathlib import Path
from typing import BinaryIO, Dict, Optional, Tuple
import logging

logger = logging.getLogger(__name__)

class StorageBackend(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–∏—Å—Ç–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, host: str, port: int, user: str, password: str, timeout: int = 30):
        self.host = host
        self.port = port
        self.user = user
        self.password = password
        self.timeout = timeout
        self.connection = None
    
    @abstractmethod
    def connect(self) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
        pass
    
    @abstractmethod
    def get_file_size(self, remote_path: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        pass
    
    @abstractmethod
    def download_to_stream(self, remote_path: str, local_stream: BinaryIO) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –ø–æ—Ç–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç"""
        pass
    
    @abstractmethod
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        pass
    
    @abstractmethod
    def get_protocol_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        pass
    
    def __enter__(self):
        self.connect()
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()

class FTPBackend(StorageBackend):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ FTP"""
    
    def connect(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.connection = FTP()
            self.connection.connect(self.host, self.port, self.timeout)
            self.connection.login(self.user, self.password)
            logger.info(f"‚ö†Ô∏è  UNSAFE: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É FTP —Å–µ—Ä–≤–µ—Ä—É {self.host}:{self.port}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É {self.host}:{self.port}: {e}")
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É: {e}")
    
    def get_file_size(self, remote_path: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FTP SIZE –∫–æ–º–∞–Ω–¥—É"""
        try:
            return self.connection.size(remote_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {remote_path}: {e}")
            return 0
    
    def download_to_stream(self, remote_path: str, local_stream: BinaryIO) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FTP –≤ –ø–æ—Ç–æ–∫"""
        total_bytes = 0
        
        def write_to_stream(data):
            nonlocal total_bytes
            bytes_written = local_stream.write(data)
            total_bytes += bytes_written
        
        try:
            self.connection.retrbinary(f'RETR {remote_path}', write_to_stream)
            return total_bytes
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {remote_path}: {e}")
            raise
    
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ FTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.connection:
            try:
                self.connection.quit()
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                pass
            finally:
                self.connection = None
    
    def get_protocol_name(self) -> str:
        return "ftp"

class FTPSBackend(StorageBackend):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ FTPS"""
    
    def connect(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTPS —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.connection = FTP_TLS()
            self.connection.connect(self.host, self.port, self.timeout)
            self.connection.login(self.user, self.password)
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
            self.connection.prot_p()
            logger.info(f"üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTPS —Å–µ—Ä–≤–µ—Ä—É {self.host}:{self.port}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FTPS —Å–µ—Ä–≤–µ—Ä—É {self.host}:{self.port}: {e}")
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ FTPS —Å–µ—Ä–≤–µ—Ä—É: {e}")
    
    def get_file_size(self, remote_path: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FTPS SIZE –∫–æ–º–∞–Ω–¥—É"""
        try:
            return self.connection.size(remote_path)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {remote_path}: {e}")
            return 0
    
    def download_to_stream(self, remote_path: str, local_stream: BinaryIO) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FTPS –≤ –ø–æ—Ç–æ–∫"""
        total_bytes = 0
        
        def write_to_stream(data):
            nonlocal total_bytes
            bytes_written = local_stream.write(data)
            total_bytes += bytes_written
        
        try:
            self.connection.retrbinary(f'RETR {remote_path}', write_to_stream)
            return total_bytes
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {remote_path}: {e}")
            raise
    
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ FTPS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.connection:
            try:
                self.connection.quit()
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                pass
            finally:
                self.connection = None
    
    def get_protocol_name(self) -> str:
        return "ftps"

class SFTPClientWrapper:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è SFTP –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–µ–π —Ö–æ—Å—Ç–æ–≤"""
    
    def __init__(self, host: str, port: int, user: str, password: str, timeout: int, known_hosts_path: Optional[str] = None):
        self.host = host
        self.port = port
        self.user = user
        self.password = password
        self.timeout = timeout
        self.known_hosts_path = known_hosts_path
        self.client = None
        self.sftp = None
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SFTP —Å–µ—Ä–≤–µ—Ä—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–µ–π —Ö–æ—Å—Ç–æ–≤"""
        try:
            import paramiko
        except ImportError:
            raise ImportError("–î–ª—è SFTP —Ç—Ä–µ–±—É–µ—Ç—Å—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ paramiko: pip install paramiko")
        
        try:
            self.client = paramiko.SSHClient()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π —Ö–æ—Å—Ç–æ–≤
            if self.known_hosts_path and os.path.exists(self.known_hosts_path):
                self.client.load_host_keys(self.known_hosts_path)
                logger.info(f"üîë –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–ª—é—á–∏ —Ö–æ—Å—Ç–æ–≤ –∏–∑ {self.known_hosts_path}")
            else:
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
                self.client.load_system_host_keys()
                logger.warning(f"‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª—é—á–∏ —Ö–æ—Å—Ç–æ–≤. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å KNOWN_HOSTS_PATH")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
            if self.known_hosts_path:
                # –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –æ—Ç–∫–ª–æ–Ω—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏
                self.client.set_missing_host_key_policy(paramiko.RejectPolicy())
            else:
                # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
                self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                logger.warning("‚ö†Ô∏è  AutoAddPolicy –≤–∫–ª—é—á–µ–Ω–∞. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ!")
            
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.client.connect(
                hostname=self.host,
                port=self.port,
                username=self.user,
                password=self.password,
                timeout=self.timeout,
                look_for_keys=False  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º SSH –∫–ª—é—á–∏, —Ç–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª—å
            )
            
            self.sftp = self.client.open_sftp()
            logger.info(f"üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SFTP —Å–µ—Ä–≤–µ—Ä—É {self.host}:{self.port}")
            
        except paramiko.AuthenticationException:
            raise ConnectionError(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ SFTP —Å–µ—Ä–≤–µ—Ä–µ {self.host}")
        except paramiko.SSHException as e:
            if "not found in known_hosts" in str(e).lower():
                raise ConnectionError(f"–ö–ª—é—á —Ö–æ—Å—Ç–∞ {self.host} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ known_hosts. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ KNOWN_HOSTS_PATH")
            raise ConnectionError(f"SSH –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {self.host}: {e}")
        except Exception as e:
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SFTP —Å–µ—Ä–≤–µ—Ä—É {self.host}: {e}")
    
    def get_file_size(self, remote_path: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SFTP"""
        try:
            stat = self.sftp.stat(remote_path)
            return stat.st_size
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {remote_path}: {e}")
            return 0
    
    def download_to_stream(self, remote_path: str, local_stream: BinaryIO) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ SFTP –≤ –ø–æ—Ç–æ–∫"""
        try:
            with self.sftp.open(remote_path, 'rb') as remote_file:
                total_bytes = 0
                while True:
                    data = remote_file.read(65536)  # 64KB —á–∞–Ω–∫–∏
                    if not data:
                        break
                    bytes_written = local_stream.write(data)
                    total_bytes += bytes_written
                return total_bytes
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {remote_path}: {e}")
            raise
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ SFTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.sftp:
            try:
                self.sftp.close()
            except Exception:
                pass
            finally:
                self.sftp = None
        
        if self.client:
            try:
                self.client.close()
            except Exception:
                pass
            finally:
                self.client = None

class SFTPBackend(StorageBackend):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ SFTP"""
    
    def __init__(self, host: str, port: int, user: str, password: str, timeout: int = 30, known_hosts_path: Optional[str] = None):
        super().__init__(host, port, user, password, timeout)
        self.known_hosts_path = known_hosts_path
        self.sftp_client = None
    
    def connect(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SFTP —Å–µ—Ä–≤–µ—Ä—É"""
        self.sftp_client = SFTPClientWrapper(
            self.host, self.port, self.user, self.password, self.timeout, self.known_hosts_path
        )
        self.sftp_client.connect()
        self.connection = self.sftp_client  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    
    def get_file_size(self, remote_path: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
        return self.sftp_client.get_file_size(remote_path)
    
    def download_to_stream(self, remote_path: str, local_stream: BinaryIO) -> int:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –ø–æ—Ç–æ–∫"""
        return self.sftp_client.download_to_stream(remote_path, local_stream)
    
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ SFTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.sftp_client:
            self.sftp_client.close()
            self.sftp_client = None
            self.connection = None
    
    def get_protocol_name(self) -> str:
        return "sftp"

class StorageBackendFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–µ–Ω–¥–æ–≤ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    
    @staticmethod
    def create_backend(
        protocol: str,
        host: str,
        port: Optional[int],
        user: str,
        password: str,
        timeout: int = 30,
        known_hosts_path: Optional[str] = None
    ) -> StorageBackend:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
        
        if protocol.lower() == "ftp":
            actual_port = port or 21
            return FTPBackend(host, actual_port, user, password, timeout)
        
        elif protocol.lower() == "ftps":
            actual_port = port or 990
            return FTPSBackend(host, actual_port, user, password, timeout)
        
        elif protocol.lower() == "sftp":
            actual_port = port or 22
            return SFTPBackend(host, actual_port, user, password, timeout, known_hosts_path)
        
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol}")

def sanitize_path(path: str) -> str:
    """
    –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä –ø—É—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç path traversal –∞—Ç–∞–∫.
    –í–∞–ª–∏–¥–Ω—ã–π –ø—É—Ç—å: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /, —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
    """
    if not path:
        raise ValueError("–ü—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π –ø—É—Ç—å
    valid_path_pattern = r"^\/[\w\-\.\/]*$"
    if not re.match(valid_path_pattern, path):
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å: {path}. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã, —Ç–æ—á–∫–∏ –∏ —Å–ª–µ—à–∏.")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if ".." in path:
        raise ValueError("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ path traversal (..) –≤ –ø—É—Ç–∏")
    
    if "//" in path:
        raise ValueError("–î–≤–æ–π–Ω—ã–µ —Å–ª–µ—à–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –≤ –ø—É—Ç–∏")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
    normalized = os.path.normpath(path)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—É—Ç—å –≤—Å–µ –µ—â–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /
    if not normalized.startswith('/'):
        normalized = '/' + normalized.lstrip('/')
    
    return normalized

def mask_user_info(user_string: str) -> str:
    """
    –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç PII).
    john@example.com -> j***@example.com
    """
    if not user_string:
        return user_string
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ email
    if "@" in user_string:
        local, domain = user_string.split("@", 1)
        if len(local) <= 2:
            masked_local = local[0] + "*"
        else:
            masked_local = local[0] + "*" * (len(local) - 1)
        return f"{masked_local}@{domain}"
    
    # –û–±—ã—á–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(user_string) <= 2:
        return user_string[0] + "*"
    else:
        return user_string[0] + "*" * (len(user_string) - 2) + user_string[-1]

def auto_tune_chunk_size(file_size: int, default_chunk_size: int = 8192) -> int:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞.
    –î–ª—è —Ñ–∞–π–ª–æ–≤ > 10MB —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º chunk_size –¥–æ 64KB –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    # 10 MB –ø–æ—Ä–æ–≥
    large_file_threshold = 10 * 1024 * 1024
    
    if file_size > large_file_threshold:
        # –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º 64KB —á–∞–Ω–∫–∏
        return 64 * 1024
    else:
        # –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return default_chunk_size 