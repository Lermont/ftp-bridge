"""
FTP Bridge v2.1.0 - FastAPI –≤–µ—Ä—Å–∏—è
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–æ—Å—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ FTP-—Å–µ—Ä–≤–µ—Ä–æ–≤ —Å Power BI –∏ –¥—Ä—É–≥–∏–º–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.
–†–µ–∞–ª–∏–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —É—Å–∏–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é.
"""

import os
import tempfile
import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path
from typing import Optional
import asyncio
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException, Query, Depends, Request
from fastapi.responses import StreamingResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
from slowapi.middleware import SlowAPIMiddleware
import uvicorn

from config import settings
from storage_backend import (
    StorageBackendFactory, 
    sanitize_path, 
    mask_user_info, 
    auto_tune_chunk_size
)

# SFTP –ø–æ–¥–¥–µ—Ä–∂–∫–∞
try:
    import paramiko
    SFTP_AVAILABLE = True
except ImportError:
    SFTP_AVAILABLE = False
    print("‚ö†Ô∏è  Paramiko –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, SFTP –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤"""
    logger = logging.getLogger(__name__)
    logger.setLevel(getattr(logging, settings.log_level.value))
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö handlers
    logger.handlers.clear()
    
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Console handler
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)
    
    # File handler —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    if settings.log_rotation_enabled:
        file_handler = RotatingFileHandler(
            settings.log_file,
            maxBytes=settings.log_max_size,
            backupCount=settings.log_backup_count,
            encoding='utf-8'
        )
    else:
        file_handler = logging.FileHandler(settings.log_file, encoding='utf-8')
    
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    
    return logger

logger = setup_logging()

# Rate Limiting —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
limiter = Limiter(
    key_func=get_remote_address,
    default_limits=["100/minute"]  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ª–∏–º–∏—Ç 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
)

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
security = HTTPBearer()

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
    os.makedirs(settings.temp_dir, exist_ok=True)
    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω: {settings.temp_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    if settings.degraded_mode:
        logger.warning("üî∂ DEGRADED MODE: –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ - FTP —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    else:
        logger.info(f"FTP Bridge v2.1.0 –∑–∞–ø—É—â–µ–Ω –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ")
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(settings.client_tokens)}")
    logger.info(f"Rate limiting: {'–≤–∫–ª—é—á–µ–Ω' if settings.rate_limit_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    logger.info(f"SFTP –ø–æ–¥–¥–µ—Ä–∂–∫–∞: {'–¥–æ—Å—Ç—É–ø–Ω–∞' if SFTP_AVAILABLE else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if settings.default_protocol.value == "ftp":
        logger.warning("‚ö†Ô∏è  Unsafe legacy mode: FTP enabled - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FTPS –∏–ª–∏ SFTP")
    
    yield
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")

app = FastAPI(
    title="FTP Bridge",
    description="–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–æ—Å—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ FTP-—Å–µ—Ä–≤–µ—Ä–æ–≤ —Å Power BI",
    version="2.1.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# Rate Limiting Middleware
if settings.rate_limit_enabled:
    app.state.limiter = limiter
    app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)
    app.add_middleware(SlowAPIMiddleware)
    logger.info(f"Rate limiting –≤–∫–ª—é—á–µ–Ω —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏: 100/minute")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins,
    allow_credentials=settings.cors_allow_credentials,
    allow_methods=settings.cors_allow_methods,
    allow_headers=["Authorization", "Content-Type"],
)

def validate_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞"""
    token = credentials.credentials
    if not settings.validate_token(token):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: {token[:8]}***")
        raise HTTPException(status_code=403, detail="Access Denied: Invalid token")
    
    client_name = settings.get_client_name(token)
    logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {client_name}")
    return token

def validate_required_params(
    host: str = Query(..., description="FTP/SFTP —Å–µ—Ä–≤–µ—Ä", example="ftp.example.com"),
    user: str = Query(..., description="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", example="username"),
    password: str = Query(..., description="–ü–∞—Ä–æ–ª—å", example="password"),
    path: str = Query(..., description="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", example="/reports/data.xlsx"),
    protocol: str = Query(default="auto", description="–ü—Ä–æ—Ç–æ–∫–æ–ª: auto, ftp, ftps, sftp", example="auto")
):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏
    if settings.degraded_mode:
        raise HTTPException(
            status_code=503, 
            detail="–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ - FTP —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        )
    
    # –°–∞–Ω–∏—Ç–∞—Ü–∏—è –ø—É—Ç–∏ - –∑–∞—â–∏—Ç–∞ –æ—Ç path traversal
    try:
        sanitized_path = sanitize_path(path)
    except ValueError as e:
        logger.warning(f"–û—Ç–∫–ª–æ–Ω–µ–Ω –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å: {path} - {e}")
        raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—É—Ç—å: {e}")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ –ø—É—Ç–∏
    file_name = Path(sanitized_path).name
    if not file_name:
        raise HTTPException(status_code=400, detail="–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—É—Ç–∏")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    if not settings.is_file_allowed(file_name):
        raise HTTPException(
            status_code=400, 
            detail=f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(settings.allowed_extensions)}"
        )
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    if protocol == "auto":
        protocol = settings.default_protocol.value
    elif protocol not in ["ftp", "ftps", "sftp"]:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ftp, ftps, sftp")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SFTP
    if protocol == "sftp" and not SFTP_AVAILABLE:
        raise HTTPException(status_code=400, detail="SFTP –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ paramiko.")
    
    return {
        "host": host,
        "user": user,
        "password": password,
        "path": sanitized_path,
        "file_name": file_name,
        "protocol": protocol
    }

async def download_with_storage_backend(params: dict) -> tuple[str, int]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ StorageBackend
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (temp_file_path, file_size)
    """
    temp_file = None
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        temp_fd, temp_file = tempfile.mkstemp(
            dir=settings.temp_dir,
            prefix=f'ftp_bridge_{params["protocol"]}_',
            suffix=f'_{params["file_name"]}'
        )
        os.close(temp_fd)
        
        # –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–æ–≤
        masked_user = mask_user_info(params['user'])
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {params['protocol'].upper()} —Å–µ—Ä–≤–µ—Ä—É: {params['host']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {masked_user}")
        
        def storage_operations():
            """–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –≤ executor"""
            # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–µ–Ω–¥–∞
            backend = StorageBackendFactory.create_backend(
                protocol=params['protocol'],
                host=params['host'],
                port=None,  # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                user=params['user'],
                password=params['password'],
                timeout=settings.ftp_timeout,
                known_hosts_path=settings.known_hosts_path
            )
            
            with backend:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                file_size = backend.get_file_size(params['path'])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
                if file_size > settings.max_file_size:
                    raise ValueError(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º: {settings.max_file_size})")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –ø–æ—Ç–æ–∫
                with open(temp_file, 'wb') as local_stream:
                    downloaded_bytes = backend.download_to_stream(params['path'], local_stream)
                
                return downloaded_bytes
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ executor
        loop = asyncio.get_running_loop()
        downloaded_bytes = await loop.run_in_executor(None, storage_operations)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        actual_file_size = os.path.getsize(temp_file)
        if actual_file_size == 0:
            raise HTTPException(status_code=500, detail="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç")
        
        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {params['file_name']} ({actual_file_size} –±–∞–π—Ç, –ø—Ä–æ—Ç–æ–∫–æ–ª: {params['protocol']})")
        return temp_file, actual_file_size
        
    except HTTPException:
        if temp_file and os.path.exists(temp_file):
            os.unlink(temp_file)
        raise
    except Exception as e:
        if temp_file and os.path.exists(temp_file):
            os.unlink(temp_file)
        
        masked_user = mask_user_info(params['user'])
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ '{params['file_name']}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {masked_user}: {str(e)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if "Name or service not known" in str(e) or "Connection refused" in str(e):
            raise HTTPException(status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {params['host']}")
        elif "530" in str(e) or "Login incorrect" in str(e) or "Authentication" in str(e):
            raise HTTPException(status_code=401, detail=f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {params['host']}")
        elif "550" in str(e) or "No such file" in str(e):
            raise HTTPException(status_code=404, detail=f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {params['path']}")
        elif "not found in known_hosts" in str(e):
            raise HTTPException(status_code=400, detail="–ö–ª—é—á —Ö–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ known_hosts. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ KNOWN_HOSTS_PATH –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á —Ö–æ—Å—Ç–∞.")
        else:
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ {params['protocol'].upper()}: {str(e)}")

def file_streamer(file_path: str, file_size: int):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ –ø–æ —á–∞—Å—Ç—è–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π chunk size"""
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–∞
    chunk_size = auto_tune_chunk_size(file_size, settings.chunk_size)
    
    logger.info(f"–°—Ç—Ä–∏–º–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Å chunk_size: {chunk_size} –±–∞–π—Ç (—Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç)")
    
    try:
        with open(file_path, 'rb') as f:
            while True:
                chunk = f.read(chunk_size)
                if not chunk:
                    break
                yield chunk
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if os.path.exists(file_path):
            try:
                os.unlink(file_path)
                logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "service": "FTP Bridge",
        "version": "2.1.0",
        "description": "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–æ—Å—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ FTP-—Å–µ—Ä–≤–µ—Ä–æ–≤ —Å Power BI",
        "endpoints": {
            "download": "/download",
            "head": "/download (HEAD method)",
            "health": "/health",
            "docs": "/docs"
        },
        "config": {
            "max_file_size_mb": settings.max_file_size // (1024 * 1024),
            "default_chunk_size_kb": settings.chunk_size // 1024,
            "protocols": ["ftp", "ftps"] + (["sftp"] if SFTP_AVAILABLE else []),
            "rate_limit_enabled": settings.rate_limit_enabled,
            "cors_origins": settings.cors_origins,
            "degraded_mode": settings.degraded_mode
        }
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
    temp_dir_exists = os.path.exists(settings.temp_dir)
    temp_dir_writable = os.access(settings.temp_dir, os.W_OK) if temp_dir_exists else False
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    if settings.degraded_mode:
        status = "degraded"
    elif temp_dir_exists and temp_dir_writable:
        status = "healthy"
    else:
        status = "unhealthy"
    
    return {
        "status": status,
        "degraded_mode": settings.degraded_mode,
        "temp_dir": settings.temp_dir,
        "temp_dir_exists": temp_dir_exists,
        "temp_dir_writable": temp_dir_writable,
        "active_tokens": len(settings.client_tokens),
        "protocols_available": ["ftp", "ftps"] + (["sftp"] if SFTP_AVAILABLE else []),
        "rate_limit_enabled": settings.rate_limit_enabled,
        "default_protocol": settings.default_protocol.value,
        "sftp_host_key_verification": bool(settings.known_hosts_path)
    }

@app.head("/download")
async def head_download_file(
    request: Request,
    params: dict = Depends(validate_required_params),
    token: str = Depends(validate_token)
):
    """
    HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ –±–µ–∑ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è preflight –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Power BI –∏ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
    """
    try:
        # –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–≥–æ–≤
        masked_user = mask_user_info(params['user'])
        logger.info(f"HEAD –∑–∞–ø—Ä–æ—Å –∫ {params['protocol'].upper()} —Å–µ—Ä–≤–µ—Ä—É: {params['host']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {masked_user}")
        
        def get_file_metadata():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞"""
            backend = StorageBackendFactory.create_backend(
                protocol=params['protocol'],
                host=params['host'],
                port=None,
                user=params['user'],
                password=params['password'],
                timeout=settings.ftp_timeout,
                known_hosts_path=settings.known_hosts_path
            )
            
            with backend:
                file_size = backend.get_file_size(params['path'])
                protocol_name = backend.get_protocol_name()
                return file_size, protocol_name
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ executor
        loop = asyncio.get_running_loop()
        file_size, protocol_name = await loop.run_in_executor(None, get_file_metadata)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if file_size > settings.max_file_size:
            raise HTTPException(
                status_code=413, 
                detail=f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º: {settings.max_file_size})"
            )
        
        client_name = settings.get_client_name(token)
        logger.info(f"HEAD –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ '{client_name}': {params['file_name']} "
                   f"(—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç, –ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol_name})")
        
        # –í–æ–∑–≤—Ä–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
        return StreamingResponse(
            iter([]),  # –ü—É—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è HEAD –∑–∞–ø—Ä–æ—Å–∞
            status_code=200,
            headers={
                "X-File-Size": str(file_size),
                "X-Protocol": protocol_name,
                "X-File-Name": params['file_name'],
                "Content-Length": str(file_size),
                "Cache-Control": "no-cache"
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        masked_user = mask_user_info(params['user'])
        logger.error(f"–û—à–∏–±–∫–∞ HEAD –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ–∞–π–ª–∞ '{params['file_name']}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {masked_user}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# Rate limiting –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ (–ø–æ–º–∏–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ)
rate_limit_str = f"{settings.rate_limit_requests}/{settings.rate_limit_window}seconds" if settings.rate_limit_enabled else None

@app.get("/download")
@limiter.limit(rate_limit_str if rate_limit_str else "1000/second")  # Fallback –µ—Å–ª–∏ rate limiting –æ—Ç–∫–ª—é—á–µ–Ω
async def download_file(
    request: Request,
    params: dict = Depends(validate_required_params),
    token: str = Depends(validate_token)
):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å FTP/FTPS/SFTP —Å–µ—Ä–≤–µ—Ä–∞ –∏ –æ—Ç–¥–∞—á–∞ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - host: FTP/SFTP —Å–µ—Ä–≤–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: ftp.example.com)
    - user: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - password: –ü–∞—Ä–æ–ª—å
    - path: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /reports/data.xlsx)
    - protocol: –ü—Ä–æ—Ç–æ–∫–æ–ª (auto, ftp, ftps, sftp)
    - Authorization: Bearer —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
    """
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—ç–∫–µ–Ω–¥
        temp_file_path, file_size = await download_with_storage_backend(params)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞
        file_extension = Path(params['file_name']).suffix.lower()
        mime_types = {
            '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            '.xls': 'application/vnd.ms-excel',
            '.csv': 'text/csv',
            '.txt': 'text/plain',
            '.pdf': 'application/pdf',
            '.zip': 'application/zip',
            '.json': 'application/json',
            '.xml': 'application/xml'
        }
        media_type = mime_types.get(file_extension, 'application/octet-stream')
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ–º PII)
        client_name = settings.get_client_name(token)
        masked_user = mask_user_info(params['user'])
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –∫–ª–∏–µ–Ω—Ç—É '{client_name}': {params['file_name']} "
                   f"(—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç, –ø—Ä–æ—Ç–æ–∫–æ–ª: {params['protocol']}, "
                   f"—Ö–æ—Å—Ç: {params['host']}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {masked_user})")
        
        # –í–æ–∑–≤—Ä–∞—Ç —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        return StreamingResponse(
            file_streamer(temp_file_path, file_size),
            media_type=media_type,
            headers={
                "Content-Disposition": f'attachment; filename="{params["file_name"]}"',
                "Content-Length": str(file_size),
                "Cache-Control": "no-cache",
                "X-File-Source": "FTP-Bridge",
                "X-File-Size": str(file_size),
                "X-Protocol-Used": params['protocol'],
                "X-Auto-Chunk-Tuned": "true" if file_size > 10 * 1024 * 1024 else "false",
                "Retry-After": "60"  # –î–ª—è 429 –æ—à–∏–±–æ–∫ rate limiting
            }
        )
        
    except HTTPException:
        raise
    except Exception as e:
        masked_user = mask_user_info(params.get('user', 'unknown'))
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{params.get('file_name', 'unknown')}' "
                    f"–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {masked_user}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level=settings.log_level.value.lower()
    ) 